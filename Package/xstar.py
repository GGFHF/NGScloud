#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#-------------------------------------------------------------------------------

'''
This software has been developed by:

    GI Genética, Fisiología e Historia Forestal
    Dpto. Sistemas y Recursos Naturales
    ETSI Montes, Forestal y del Medio Natural
    Universidad Politécnica de Madrid
    http://gfhforestal.com/
    https://github.com/ggfhf/

Licence: GNU General Public Licence Version 3.
'''

#-------------------------------------------------------------------------------

'''
This file contains functions related to the STAR process used in both console
mode and gui mode.
'''

#-------------------------------------------------------------------------------

import os
import re
import sys

import xbioinfoapp
import xcluster
import xconfiguration
import xec2
import xlib
import xssh

#-------------------------------------------------------------------------------

def create_star_config_file(experiment_id='exp001', reference_dataset_id='Athaliana', reference_file='Arabidopsis_thaliana.TAIR10.dna.toplevel.fa', gtf_file='Arabidopsis_thaliana.TAIR10.36.gtf', read_dataset_id=xlib.get_uploaded_read_dataset_name(), read_type = 'PE', read_file_1='rnaseq-a_1.fastq', read_file_2='rnaseq-a_2.fastq'):
    '''
    Create STAR config file with the default options. It is necessary
    update the options in each run.
    '''

    # initialize the control variable and the error list
    OK = True
    error_list = []

    # create the STAR config file and write the default options
    try:
        if not os.path.exists(os.path.dirname(get_star_config_file())):
            os.makedirs(os.path.dirname(get_star_config_file()))
        with open(get_star_config_file(), mode='w', encoding='utf8') as file_id:
            file_id.write('{0}\n'.format('# You must review the information of this file and update the values with the corresponding ones to the current run.'))
            file_id.write('{0}\n'.format('#'))
            file_id.write('{0}\n'.format('# The reference and GTF files must be located in the cluster directory {0}/experiment_id/reference_dataset_id'.format(xlib.get_cluster_reference_dir())))
            file_id.write('{0}\n'.format('# The read files must be located in the cluster directory {0}/experiment_id/read_dataset_id'.format(xlib.get_cluster_read_dir())))
            file_id.write('{0}\n'.format('# The experiment_id, reference_dataset_id, reference_file, gtf_file and read_dataset_id names are fixed in the identification section.'))
            file_id.write('{0}\n'.format('#'))
            file_id.write('{0}\n'.format('# Genome-guided Trinity is used to convert the bam file generated by STAR to fasta file.'))
            file_id.write('{0}\n'.format('#'))
            file_id.write('{0}\n'.format('# You can consult the parameters of STAR and their meaning in https://github.com/alexdobin/STAR.'))
            file_id.write('{0}\n'.format('# and the ones of Trinity in https://github.com/trinityrnaseq/trinityrnaseq/wiki.'))
            file_id.write('{0}\n'.format('#'))
            file_id.write('{0}\n'.format('# In sections "STAR parameters" and "Genome-guided Trinity parameters", the key "other_parameters" allows you to input additional parameters in the format:'))
            file_id.write('{0}\n'.format('#'))
            file_id.write('{0}\n'.format('#    other_parameters = --parameter-1[=value-1][; --parameter-2[=value-2][; ...; --parameter-n[=value-n]]]'))
            file_id.write('{0}\n'.format('#'))
            file_id.write('{0}\n'.format('# parameter-i is a parameter name of STAR or Trinity and value-i a valid value of parameter-i, e.g.'))
            file_id.write('{0}\n'.format('#'))
            file_id.write('{0}\n'.format('#    other_parameters = --outSAMattributes=All; --limitGenomeGenerateRAM=48000000000'))
            file_id.write('{0}\n'.format(''))
            file_id.write('{0}\n'.format('# This section has the information identifies the experiment.'))
            file_id.write('{0}\n'.format('[identification]'))
            file_id.write('{0:<50} {1}\n'.format('experiment_id = {0}'.format(experiment_id), '# experiment identification'))
            file_id.write('{0:<50} {1}\n'.format('reference_dataset_id = {0}'.format(reference_dataset_id), '# reference dataset identification'))
            file_id.write('{0:<50} {1}\n'.format('reference_file = {0}'.format(reference_file), '# reference file name'))
            file_id.write('{0:<50} {1}\n'.format('gtf_file = {0}'.format(gtf_file), '# GTF file name'))
            file_id.write('{0:<50} {1}\n'.format('read_dataset_id = {0}'.format(read_dataset_id), '# read dataset identification'))
            file_id.write('{0}\n'.format(''))
            file_id.write('{0}\n'.format('# This section has the information to set the STAR parameters'))
            file_id.write('{0}\n'.format('[STAR parameters]'))
            file_id.write('{0:<50} {1}\n'.format('threads = 2', '# number of threads for use'))
            file_id.write('{0:<50} {1}\n'.format('two_pass_mode = NONE', '# 2-pass mapping mode: NONE (1-pass mapping) or BASIC (basic 2-pass mapping, with all 1st pass junctions inserted into the genome indices on the fly)'))
            file_id.write('{0:<50} {1}\n'.format('two_pass_1_readsn = -1', '# number of reads to process for the 1st step; use -1 to map all reads in the first step'))
            file_id.write('{0:<50} {1}\n'.format('out_filter_multimap_nmax = 20', '# maximun number of multiple alignments allowed for a read'))
            file_id.write('{0:<50} {1}\n'.format('out_reads_unmapped = FASTX', '# output of unmapped and partially mapped reads in separate files: NONE (no output) or FASTX (output in separate fasta/fastq files)'))
            file_id.write('{0:<50} {1}\n'.format('cleanup = NO', '# leave intermediate files: YES or NO'))
            file_id.write('{0:<50} {1}\n'.format('other_parameters = NONE', '# additional parameters to the previous ones or NONE'))
            file_id.write('{0}\n'.format(''))
            file_id.write('{0}\n'.format('# This section has the information to set the Genome-guided Trinity parameters'))
            file_id.write('{0}\n'.format('[Genome-guided Trinity parameters]'))
            file_id.write('{0:<50} {1}\n'.format('max_memory = 10', '# suggested maximum memory in GiB to use by Trinity where limiting can be enabled'))
            file_id.write('{0:<50} {1}\n'.format('genome_guided_max_intron = 10000', '# maximum allowed intron length'))
            file_id.write('{0:<50} {1}\n'.format('other_parameters = NONE', '# additional parameters to the previous ones or NONE'))
            file_id.write('{0}\n'.format(''))
            file_id.write('{0}\n'.format('# This section has the information of the library (only one library is allowed)'))
            file_id.write('{0}\n'.format('[library]'))
            file_id.write('{0:<50} {1}\n'.format('format = FASTQ', '# FASTQ or FASTA'))
            file_id.write('{0:<50} {1}\n'.format('read_type = {0}'.format(read_type), '# SE (single-end) or PE (paired-end)'))
            file_id.write('{0:<50} {1}\n'.format('read_file_1 = {0}'.format(os.path.basename(read_file_1)), '# name of the read file in SE read type or the + strand read file in PE case'))
            if read_type == 'SE':
                file_id.write('{0:<50} {1}\n'.format('read_file_2 = NONE', '# name of the - strand reads file in PE read type or NONE in SE case'))
            elif read_type == 'PE':
                file_id.write('{0:<50} {1}\n'.format('read_file_2 = {0}'.format(os.path.basename(read_file_2)), '# name of the - strand reads file in PE read type or NONE in SE case'))
    except:
        error_list.append('*** ERROR: The file {0} can not be recreated'.format(get_star_config_file()))
        OK = False

    # return the control variable and the error list
    return (OK, error_list)

#-------------------------------------------------------------------------------

def run_star_process(cluster_name, log, function=None):
    '''
    Run a STAR process.
    '''

    # initialize the control variable
    OK = True

    # get the STAR option dictionary
    star_option_dict = xlib.get_option_dict(get_star_config_file())

    # get the experiment identification
    experiment_id = star_option_dict['identification']['experiment_id']

    # warn that the log window must not be closed
    if not isinstance(log, xlib.DevStdOut):
        log.write('This process might take several minutes. Do not close this window, please wait!\n')

    # validate the STAR config file
    log.write('{0}\n'.format(xlib.get_separator()))
    log.write('Validating the {0} config file ...\n'.format(xlib.get_star_name()))
    (OK, error_list) = validate_star_config_file(strict=True)
    if OK:
        log.write('The config file is OK.\n')
    else:
        log.write('*** ERROR: The config file is not valid.\n')
        log.write('Please correct this file or recreate the config files.\n')

    # create the SSH client connection
    if OK:
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('Connecting the SSH client ...\n')
        (OK, error_list, ssh_client) = xssh.create_ssh_client_connection(cluster_name, 'master')
        if OK:
            log.write('The SSH client is connected.\n')
        else:
            for error in error_list:
                log.write('{0}\n'.format(error))

    # create the SSH transport connection
    if OK:
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('Connecting the SSH transport ...\n')
        (OK, error_list, ssh_transport) = xssh.create_ssh_transport_connection(cluster_name, 'master')
        if OK:
            log.write('The SSH transport is connected.\n')
        else:
            for error in error_list:
                log.write('{0}\n'.format(error))

    # create the SFTP client 
    if OK:
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('Connecting the SFTP client ...\n')
        sftp_client = xssh.create_sftp_client(ssh_transport)
        log.write('The SFTP client is connected.\n')

    # warn that the requirements are being verified 
    if OK:
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('Verifying process requirements ...\n')

    # verify the master is running
    if OK:
        (master_state_code, master_state_name) = xec2.get_node_state(cluster_name, 'master')
        if master_state_code != 16:
            log.write('*** ERROR: The cluster {0} is not running. Its state is {1} ({2}).\n'.format(cluster_name, master_state_code, master_state_name))
            OK = False

    # verify STAR is set up
    if OK:
        (OK, error_list, is_setup) = xbioinfoapp.is_setup_bioconda_package(xlib.get_star_bioconda_code(), cluster_name, True, ssh_client)
        if OK:
            if not is_setup:
                log.write('*** ERROR: {0} is not setup.\n'.format(xlib.get_star_name()))
                OK = False
        else:
            log.write('*** ERROR: The verification of {0} setup could not be performed.\n'.format(xlib.get_star_name()))

    # warn that the requirements are OK 
    if OK:
        log.write('Process requirements are OK.\n')

    # determine the run directory in the cluster
    if OK:
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('Determining the run directory in the cluster ...\n')
        current_run_dir = xlib.get_cluster_current_run_dir(experiment_id, xlib.get_star_code())
        command = 'mkdir --parents {0}'.format(current_run_dir)
        (OK, stdout, stderr) = xssh.execute_cluster_command(ssh_client, command)
        if OK:
            log.write('The directory path is {0}.\n'.format(current_run_dir))
        else:
            log.write('*** ERROR: Wrong command ---> {0}\n'.format(command))

    # build the STAR process script
    if OK:
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('Building the process script {0} ...\n'.format(get_star_process_script()))
        (OK, error_list) = build_star_process_script(cluster_name, current_run_dir)
        if OK:
            log.write('The file is built.\n')
        if not OK:
            log.write('*** ERROR: The file could not be built.\n')

    # upload the STAR process script to the cluster
    if OK:
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('Uploading the process script {0} to the directory {1} of the master ...\n'.format(get_star_process_script(), current_run_dir))
        cluster_path = '{0}/{1}'.format(current_run_dir, os.path.basename(get_star_process_script()))
        (OK, error_list) = xssh.put_file(sftp_client, get_star_process_script(), cluster_path)
        if OK:
            log.write('The file is uploaded.\n')
        else:
            for error in error_list:
                log.write('{0}\n'.format(error))

    # set run permision to the STAR process script in the cluster
    if OK:
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('Setting on the run permision of {0}/{1} ...\n'.format(current_run_dir, os.path.basename(get_star_process_script())))
        command = 'chmod u+x {0}/{1}'.format(current_run_dir, os.path.basename(get_star_process_script()))
        (OK, stdout, stderr) = xssh.execute_cluster_command(ssh_client, command)
        if OK:
            log.write('The run permision is set.\n')
        else:
            log.write('*** ERROR: Wrong command ---> {0}\n'.format(command))

    # build the STAR process starter
    if OK:
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('Building the process starter {0} ...\n'.format(get_star_process_starter()))
        (OK, error_list) = build_star_process_starter(current_run_dir)
        if OK:
            log.write('The file is built.\n')
        if not OK:
            log.write('***ERROR: The file could not be built.\n')

    # upload the STAR process starter to the cluster
    if OK:
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('Uploading the process starter {0} to the directory {1} of the master ...\n'.format(get_star_process_starter(), current_run_dir))
        cluster_path = '{0}/{1}'.format(current_run_dir, os.path.basename(get_star_process_starter()))
        (OK, error_list) = xssh.put_file(sftp_client, get_star_process_starter(), cluster_path)
        if OK:
            log.write('The file is uploaded.\n')
        else:
            for error in error_list:
                log.write('{0}\n'.format(error))

    # set run permision to the STAR process starter in the cluster
    if OK:
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('Setting on the run permision of {0}/{1} ...\n'.format(current_run_dir, os.path.basename(get_star_process_starter())))
        command = 'chmod u+x {0}/{1}'.format(current_run_dir, os.path.basename(get_star_process_starter()))
        (OK, stdout, stderr) = xssh.execute_cluster_command(ssh_client, command)
        if OK:
            log.write('The run permision is set.\n')
        else:
            log.write('*** ERROR: Wrong command ---> {0}\n'.format(command))

    # submit the STAR process
    if OK:
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('Submitting the process script {0}/{1} ...\n'.format(current_run_dir, os.path.basename(get_star_process_starter())))
        sge_env = xcluster.get_sge_env()
        command = '{0}; qsub -V -b n -cwd {1}/{2}'.format(sge_env, current_run_dir, os.path.basename(get_star_process_starter()))
        (OK, stdout, stderr) = xssh.execute_cluster_command(ssh_client, command)
        if OK:
            for line in stdout:
                log.write('{0}\n'.format(line))
        else:
            log.write('*** ERROR: Wrong command ---> {0}\n'.format(command))

    # close the SSH transport connection
    if OK:
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('Closing the SSH transport connection ...\n')
        xssh.close_ssh_transport_connection(ssh_transport)
        log.write('The connection is closed.\n')

    # close the SSH client connection
    if OK:
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('Closing the SSH client connection ...\n')
        xssh.close_ssh_client_connection(ssh_client)
        log.write('The connection is closed.\n')

    # warn that the log window can be closed
    if not isinstance(log, xlib.DevStdOut):
        log.write('{0}\n'.format(xlib.get_separator()))
        log.write('You can close this window now.\n')

    # execute final function
    if function is not None:
        function()

    # return the control variable
    return OK

#-------------------------------------------------------------------------------

def validate_star_config_file(strict):
    '''
    Validate the STAR config file of a run.
    '''

    # initialize the control variable and the error list
    OK = True
    error_list = []

    # intitialize variable used when value is not found
    not_found = '***NOTFOUND***'.upper()

    # get the option dictionary
    try:
        star_option_dict = xlib.get_option_dict(get_star_config_file())
    except:
        error_list.append('*** ERROR: The syntax is WRONG.')
        OK = False
    else:

        # get the sections list
        sections_list = []
        for section in star_option_dict.keys():
            sections_list.append(section)
        sections_list.sort()

        # check section "identification"
        if 'identification' not in sections_list:
            error_list.append('*** ERROR: the section "identification" is not found.')
            OK = False
        else:

            # check section "identification" - key "experiment_id"
            experiment_id = star_option_dict.get('identification', {}).get('experiment_id', not_found)
            if experiment_id == not_found:
                error_list.append('*** ERROR: the key "experiment_id" is not found in the section "identification".')
                OK = False

            # check section "identification" - key "reference_dataset_id"
            reference_dataset_id = star_option_dict.get('identification', {}).get('reference_dataset_id', not_found)
            if reference_dataset_id == not_found:
                error_list.append('*** ERROR: the key "reference_dataset_id" is not found in the section "identification".')
                OK = False

            # check section "identification" - key "reference_file"
            reference_file = star_option_dict.get('identification', {}).get('reference_file', not_found)
            if reference_file == not_found:
                error_list.append('*** ERROR: the key "reference_file" is not found in the section "identification".')
                OK = False

            # check section "identification" - key "gtf_file"
            gtf_file = star_option_dict.get('identification', {}).get('gtf_file', not_found)
            if gtf_file == not_found:
                error_list.append('*** ERROR: the key "gtf_file" is not found in the section "identification".')
                OK = False

            # check section "identification" - key "read_dataset_id"
            read_dataset_id = star_option_dict.get('identification', {}).get('read_dataset_id', not_found)
            if read_dataset_id == not_found:
                error_list.append('*** ERROR: the key "read_dataset_id" is not found in the section "identification".')
                OK = False

        # check section "STAR parameters"
        if 'STAR parameters' not in sections_list:
            error_list.append('*** ERROR: the section "STAR parameters" is not found.')
            OK = False
        else:

            # check section "STAR parameters" - key "threads"
            threads = star_option_dict.get('STAR parameters', {}).get('threads', not_found)
            if threads == not_found:
                error_list.append('*** ERROR: the key "threads" is not found in the section "STAR parameters".')
                OK = False
            else:
                try:
                    if int(threads) < 1:
                        error_list.append('*** ERROR: the key "threads" in the section "STAR parameters" must be an integer value greater or equal to 1.')
                        OK = False
                except:
                    error_list.append('*** ERROR: the key "threads" in the section "STAR parameters" must be an integer value greater or equal to 1.')
                    OK = False

            # check section "STAR parameters" - key "out_filter_multimap_nmax"
            out_filter_multimap_nmax = star_option_dict.get('STAR parameters', {}).get('out_filter_multimap_nmax', not_found)
            if out_filter_multimap_nmax == not_found:
                error_list.append('*** ERROR: the key "out_filter_multimap_nmax" is not found in the section "STAR parameters".')
                OK = False
            else:
                try:
                    if int(out_filter_multimap_nmax) < 1:
                        error_list.append('*** ERROR: the key "out_filter_multimap_nmax" in the section "STAR parameters" must be an integer value greater or equal to 1.')
                        OK = False
                except:
                    error_list.append('*** ERROR: the key "out_filter_multimap_nmax" in the section "STAR parameters" must be an integer value greater or equal to 1.')
                    OK = False

            # check section "STAR parameters" - key "two_pass_mode"
            two_pass_mode = star_option_dict.get('STAR parameters', {}).get('two_pass_mode', not_found).upper()
            if two_pass_mode == not_found:
                error_list.append('*** ERROR: the key "two_pass_mode" is not found in the section "STAR parameters".')
                OK = False
            elif two_pass_mode not in ['NONE', 'BASIC']:
                error_list.append('*** ERROR: the key "two_pass_mode" value in the section "STAR parameters" must be NONE or BASIC.')
                OK = False

            # check section "STAR parameters" - key "two_pass_1_readsn"
            two_pass_1_readsn = star_option_dict.get('STAR parameters', {}).get('two_pass_1_readsn', not_found)
            if two_pass_1_readsn == not_found:
                error_list.append('*** ERROR: the key "two_pass_1_readsn" is not found in the section "STAR parameters".')
                OK = False
            else:
                try:
                    if int(two_pass_1_readsn) < 1 and int(two_pass_1_readsn) != -1:
                        error_list.append('*** ERROR: the key "two_pass_1_readsn" in the section "STAR parameters" must be an integer value greater or equal to 1, or -1 (all reads).')
                        OK = False
                except:
                    error_list.append('*** ERROR: the key "two_pass_1_readsn" in the section "STAR parameters" must be an integer value greater or equal to 1, or -1 (all redas).')
                    OK = False

            # check section "STAR parameters" - key "out_reads_unmapped"
            out_reads_unmapped = star_option_dict.get('STAR parameters', {}).get('out_reads_unmapped', not_found).upper()
            if out_reads_unmapped == not_found:
                error_list.append('*** ERROR: the key "out_reads_unmapped" is not found in the section "STAR parameters".')
                OK = False
            elif out_reads_unmapped not in ['NONE', 'FASTX']:
                error_list.append('*** ERROR: the key "out_reads_unmapped" value in the section "STAR parameters" must be NONE or FASTX.')
                OK = False

            # check section "STAR parameters" - key "cleanup"
            cleanup = star_option_dict.get('STAR parameters', {}).get('cleanup', not_found).upper()
            if cleanup == not_found:
                error_list.append('*** ERROR: the key "cleanup" is not found in the section "STAR parameters".')
                OK = False
            elif cleanup not in ['YES', 'NO']:
                error_list.append('*** ERROR: the key "cleanup" value in the section "STAR parameters" must be YES or NO.')
                OK = False

            # check section "STAR parameters" - key "other_parameters"
            not_allowed_parameters_list = ['runMode', 'runThreadN', 'genomeDir', 'readFilesCommand', 'readFilesIn', 'sjdbGTFfile', 'twopassMode', 'twopass1readsN', 'quantMode', 'outFilterMultimapNmax', 'outSAMunmapped', 'outFileNamePrefix', 'outTmpKeep', 'outSAMtype']
            other_parameters = star_option_dict.get('STAR parameters', {}).get('other_parameters', not_found)
            if other_parameters == not_found:
                error_list.append('*** ERROR: the key "other_parameters" is not found in the section "STAR parameters".')
                OK = False
            else:
                if other_parameters.upper() != 'NONE':
                    parameter_list = [x.strip() for x in other_parameters.split(';')]
                    for parameter in parameter_list:
                        try:
                            if parameter.find('=') > 0:
                                pattern = r'^--(.+)=(.+)$'
                                mo = re.search(pattern, parameter)
                                parameter_name = mo.group(1).strip()
                                parameter_value = mo.group(2).strip()
                            else:
                                pattern = r'^--(.+)$'
                                mo = re.search(pattern, parameter)
                                parameter_name = mo.group(1).strip()
                        except:
                            error_list.append('*** ERROR: the value of the key "other_parameters" in the section "STAR parameters" must be NONE or a valid parameter list.')
                            OK = False
                            break
                        if parameter_name in not_allowed_parameters_list:
                            error_list.append('*** ERROR: the parameter {0} is not allowed in the key "other_parameters" of the section "STAR parameters" because it is controled by {1}.'.format(parameter_name, xlib.get_project_name()))
                            OK = False

        # check section "Genome-guided Trinity parameters"
        if 'Genome-guided Trinity parameters' not in sections_list:
            error_list.append('*** ERROR: the section "Genome-guided Trinity parameters" is not found.')
            OK = False
        else:

            # check section "Genome-guided Trinity parameters" - key "max_memory"
            max_memory = star_option_dict.get('Genome-guided Trinity parameters', {}).get('max_memory', not_found)
            if max_memory == not_found:
                error_list.append('*** ERROR: the key "max_memory" is not found in the section "Genome-guided Trinity parameters".')
                OK = False
            else:
                try:
                    if int(max_memory) < 1:
                        error_list.append('*** ERROR: the key "max_memory" in the section "Genome-guided Trinity parameters" must be an integer value greater or equal to 1.')
                        OK = False
                except:
                    error_list.append('*** ERROR: the key "max_memory" in the section "Genome-guided Trinity parameters" must be an integer value greater or equal to 1.')
                    OK = False

            # check section "Genome-guided Trinity parameters" - key "genome_guided_max_intron"
            genome_guided_max_intron = star_option_dict.get('Genome-guided Trinity parameters', {}).get('genome_guided_max_intron', not_found)
            if genome_guided_max_intron == not_found:
                error_list.append('*** ERROR: the key "genome_guided_max_intron" is not found in the section "Genome-guided Trinity parameters".')
                OK = False
            else:
                try:
                    if int(genome_guided_max_intron) < 1:
                        error_list.append('*** ERROR: the key "genome_guided_max_intron" in the section "Genome-guided Trinity parameters" must be an integer value greater or equal to 1.')
                        OK = False
                except:
                    error_list.append('*** ERROR: the key "genome_guided_max_intron" in the section "Genome-guided Trinity parameters" must be an integer value greater or equal to 1.')
                    OK = False

            # check section "Genome-guided Trinity parameters" - key "other_parameters"
            not_allowed_parameters_list = ['seqType', 'left', 'right', 'single', 'KMER_SIZE', 'CPU', 'max_memory', 'genome_guided_max_intron', 'no_normalize_reads', 'output']
            other_parameters = star_option_dict.get('Genome-guided Trinity parameters', {}).get('other_parameters', not_found)
            if other_parameters == not_found:
                error_list.append('*** ERROR: the key "other_parameters" is not found in the section "Genome-guided Trinity parameters".')
                OK = False
            else:
                if other_parameters.upper() != 'NONE':
                    parameter_list = [x.strip() for x in other_parameters.split(';')]
                    for parameter in parameter_list:
                        try:
                            if parameter.find('=') > 0:
                                pattern = r'^--(.+)=(.+)$'
                                mo = re.search(pattern, parameter)
                                parameter_name = mo.group(1).strip()
                                parameter_value = mo.group(2).strip()
                            else:
                                pattern = r'^--(.+)$'
                                mo = re.search(pattern, parameter)
                                parameter_name = mo.group(1).strip()
                        except:
                            error_list.append('*** ERROR: the value of the key "other_parameters" in the section "Genome-guided Trinity parameters" must be NONE or a valid parameter list.')
                            OK = False
                            break
                        if parameter_name in not_allowed_parameters_list:
                            error_list.append('*** ERROR: the parameter {0} is not allowed in the key "other_parameters" of the section "Genome-guided Trinity parameters" because it is controled by {1}.'.format(parameter_name, xlib.get_project_name()))
                            OK = False

        # check section "library"
        if 'library' not in sections_list:
            error_list.append('*** ERROR: the section "library" is not found.')
            OK = False
        else:

            # check section "library" - key "format"
            format = star_option_dict.get('library', {}).get('format', not_found).upper()
            if format == not_found:
                error_list.append('*** ERROR: the key "format" is not found in the section "library".')
                OK = False
            elif format not in ['FASTA', 'FASTQ']:
                error_list.append('*** ERROR: the key "format" value in the section "library" must be FASTA or FASTQ.')
                OK = False

            # check section "library" - key "read_type"
            read_type = star_option_dict.get('library', {}).get('read_type', not_found).upper()
            if read_type == not_found:
                error_list.append('*** ERROR: the key "read_type" is not found in the section "library".')
                OK = False
            elif read_type not in ['PE', 'SE']:
                error_list.append('*** ERROR: the key "read_type" value in the section "library" must be SE or PE.')
                OK = False

            # check section "library" - key "read_file_1"
            read_file_1 = star_option_dict.get('library', {}).get('read_file_1', not_found)
            if read_file_1 == not_found:
                error_list.append('*** ERROR: the key "read_file_1" is not found in the section "{0}"'.format(section))
                OK = False

            # check section "library" - key "read_file_2"
            read_file_2 = star_option_dict.get('library', {}).get('read_file_2', not_found)
            if read_file_2 == not_found:
                error_list.append('*** ERROR: the key "read_file_2" is not found in the section "{0}"'.format(section))
                OK = False

    # warn that the results config file is not valid if there are any errors
    if not OK:
        error_list.append('\nThe {0} config file is not valid. Please, correct this file or recreate it.'.format(xlib.get_star_name()))

    # return the control variable and the error list
    return (OK, error_list)

#-------------------------------------------------------------------------------

def build_star_process_script(cluster_name, current_run_dir):
    '''
    Build the current STAR process script.
    '''

    # initialize the control variable and the error list
    OK = True
    error_list = []

    # get the STAR option dictionary
    star_option_dict = xlib.get_option_dict(get_star_config_file())

    # get the options
    experiment_id = star_option_dict['identification']['experiment_id']
    reference_dataset_id = star_option_dict['identification']['reference_dataset_id']
    reference_file = star_option_dict['identification']['reference_file']
    gtf_file = star_option_dict['identification']['gtf_file']
    read_dataset_id = star_option_dict['identification']['read_dataset_id']
    threads = star_option_dict['STAR parameters']['threads']
    two_pass_mode = star_option_dict['STAR parameters']['two_pass_mode']
    two_pass_1_readsn = star_option_dict['STAR parameters']['two_pass_1_readsn']
    out_filter_multimap_nmax = star_option_dict['STAR parameters']['out_filter_multimap_nmax']
    out_reads_unmapped = star_option_dict['STAR parameters']['out_reads_unmapped']
    cleanup = star_option_dict['STAR parameters']['cleanup']
    star_other_parameters = star_option_dict['STAR parameters']['other_parameters']
    max_memory = star_option_dict['Genome-guided Trinity parameters']['max_memory']
    genome_guided_max_intron = star_option_dict['Genome-guided Trinity parameters']['genome_guided_max_intron']
    trinity_other_parameters = star_option_dict['Genome-guided Trinity parameters']['other_parameters']
    read_type = star_option_dict['library']['read_type']
    read_file_1 = star_option_dict['library']['read_file_1']
    read_file_2 = star_option_dict['library']['read_file_2']

    # get the read file paths
    read_file_1 = xlib.get_cluster_read_file(experiment_id, read_dataset_id, read_file_1)
    read_file_2 = xlib.get_cluster_read_file(experiment_id, read_dataset_id, read_file_2)

    # set the reference file path
    reference_file = xlib.get_cluster_reference_file(reference_dataset_id, reference_file)

    # set the gtf file path
    gtf_file = xlib.get_cluster_reference_file(reference_dataset_id, gtf_file)

    # set the STAR indexes directory
    (reference_file_name, reference_file_extension) = os.path.splitext(reference_file)
    star_indexes_dir = '{0}_star_indexes'.format(reference_file_name)

    # write the STAR process script
    try:
        if not os.path.exists(os.path.dirname(get_star_process_script())):
            os.makedirs(os.path.dirname(get_star_process_script()))
        with open(get_star_process_script(), mode='w', encoding='utf8', newline='\n') as file_id:
            file_id.write('{0}\n'.format('#!/bin/bash'))
            file_id.write('{0}\n'.format('#-------------------------------------------------------------------------------'))
            file_id.write('{0}\n'.format('STAR_PATH={0}/{1}/envs/{2}/bin'.format(xlib.get_cluster_app_dir(), xlib.get_miniconda3_name(), xlib.get_star_bioconda_code())))
            file_id.write('{0}\n'.format('TRINITY_PATH={0}/{1}/envs/{2}/bin'.format(xlib.get_cluster_app_dir(), xlib.get_miniconda3_name(), xlib.get_trinity_bioconda_code())))
            file_id.write('{0}\n'.format('BOWTIE2_PATH={0}/{1}/envs/{2}/bin'.format(xlib.get_cluster_app_dir(), xlib.get_miniconda3_name(), xlib.get_bowtie2_bioconda_code())))
            file_id.write('{0}\n'.format('export PATH=$STAR_PATH:$TRINITY_PATH:$BOWTIE2_PATH:$PATH'))
            file_id.write('{0}\n'.format('SEP="#########################################"'))
            file_id.write('{0}\n'.format('cd {0}/{1}/bin'.format(xlib.get_cluster_app_dir(), xlib.get_miniconda3_name())))
            file_id.write('{0}\n'.format('source activate {0}'.format(xlib.get_star_bioconda_code())))
            file_id.write('{0}\n'.format('#-------------------------------------------------------------------------------'))
            file_id.write('{0}\n'.format('function init'))
            file_id.write('{0}\n'.format('{'))
            file_id.write('{0}\n'.format('    INIT_DATETIME=`date --utc +%s`'))
            file_id.write('{0}\n'.format('    FORMATTED_INIT_DATETIME=`date --date="@$INIT_DATETIME" "+%Y-%m-%d %H:%M:%S"`'))
            file_id.write('{0}\n'.format('    echo "$SEP"'))
            file_id.write('{0}\n'.format('    echo "Script started in node $HOSTNAME of cluster {0} at $FORMATTED_INIT_DATETIME UTC."'.format(cluster_name)))
            file_id.write('{0}\n'.format('}'))
            file_id.write('{0}\n'.format('#-------------------------------------------------------------------------------'))
            file_id.write('{0}\n'.format('function create_star_indexes'))
            file_id.write('{0}\n'.format('{'))
            file_id.write('{0}\n'.format('    cd {0}'.format(current_run_dir)))
            file_id.write('{0}\n'.format('    echo "$SEP"'))
            file_id.write('{0}\n'.format('    echo "Creating indexes ..."'))
            file_id.write('{0}\n'.format('    rm -rf {0}'.format(star_indexes_dir)))
            file_id.write('{0}\n'.format('    mkdir --parents {0}'.format(star_indexes_dir)))
            file_id.write('{0}\n'.format('    /usr/bin/time \\'))
            file_id.write('{0}\n'.format('        --format="$SEP\\nElapsed real time (s): %e\\nCPU time in kernel mode (s): %S\\nCPU time in user mode (s): %U\\nPercentage of CPU: %P\\nMaximum resident set size(Kb): %M\\nAverage total memory use (Kb):%K" \\'))
            file_id.write('{0}\n'.format('        STAR \\'))
            file_id.write('{0}\n'.format('            --runMode genomeGenerate \\'))
            file_id.write('{0}\n'.format('            --runThreadN {0} \\'.format(threads)))
            file_id.write('{0}\n'.format('            --genomeDir {0} \\'.format(star_indexes_dir)))
            file_id.write('{0}\n'.format('            --genomeFastaFiles {0}'.format(reference_file)))
            file_id.write('{0}\n'.format('    RC=$?'))
            file_id.write('{0}\n'.format('    if [ $RC -ne 0 ]; then manage_error STAR $RC; fi'))
            file_id.write('{0}\n'.format('}'))
            file_id.write('{0}\n'.format('#-------------------------------------------------------------------------------'))
            file_id.write('{0}\n'.format('function run_star_process'))
            file_id.write('{0}\n'.format('{'))
            file_id.write('{0}\n'.format('    cd {0}'.format(current_run_dir)))
            file_id.write('{0}\n'.format('    echo "$SEP"'))
            file_id.write('{0}\n'.format('    STAR --version'))
            file_id.write('{0}\n'.format('    echo "$SEP"'))
            file_id.write('{0}\n'.format('    echo "Assembling reads ..."'))
            file_id.write('{0}\n'.format('    /usr/bin/time \\'))
            file_id.write('{0}\n'.format('        --format="$SEP\\nElapsed real time (s): %e\\nCPU time in kernel mode (s): %S\\nCPU time in user mode (s): %U\\nPercentage of CPU: %P\\nMaximum resident set size(Kb): %M\\nAverage total memory use (Kb):%K" \\'))
            file_id.write('{0}\n'.format('        STAR \\'))
            file_id.write('{0}\n'.format('            --runMode alignReads \\'))
            file_id.write('{0}\n'.format('            --runThreadN {0} \\'.format(threads)))
            file_id.write('{0}\n'.format('            --genomeDir {0} \\'.format(star_indexes_dir)))
            if read_file_1.endswith('.gz'):
                file_id.write('{0}\n'.format('            --readFilesCommand gzip \\'))
            if read_type.upper() == 'SE':
                file_id.write('{0}\n'.format('            --readFilesIn {0} \\'.format(read_file_1)))
            elif read_type.upper() == 'PE':
                file_id.write('{0}\n'.format('            --readFilesIn {0} {1} \\'.format(read_file_1, read_file_2)))
            file_id.write('{0}\n'.format('            --sjdbGTFfile {0} \\'.format(gtf_file)))
            if two_pass_mode.upper() == 'NONE':
                file_id.write('{0}\n'.format('            --twopassMode None \\'))
            elif two_pass_mode.upper() == 'BASIC':
                file_id.write('{0}\n'.format('            --twopassMode Basic \\'))
                file_id.write('{0}\n'.format('            --twopass1readsN {0} \\'.format(two_pass_1_readsn)))
            file_id.write('{0}\n'.format('            --quantMode TranscriptomeSAM \\'))
            if out_reads_unmapped.upper() == 'NONE':
                file_id.write('{0}\n'.format('            --outReadsUnmapped None \\'))
            elif out_reads_unmapped.upper() == 'FASTX':
                file_id.write('{0}\n'.format('            --outReadsUnmapped Fastx \\'))
            file_id.write('{0}\n'.format('            --outFilterMultimapNmax {0} \\'.format(out_filter_multimap_nmax)))
            file_id.write('{0}\n'.format('            --outSAMunmapped None \\'))
            file_id.write('{0}\n'.format('            --outFileNamePrefix "{0}/star" \\'.format(current_run_dir)))
            if cleanup.upper() == 'NO':
                file_id.write('{0}\n'.format('            --outTmpKeep Yes \\'))
            if star_other_parameters.upper() == 'NONE':
                file_id.write('{0}\n'.format('            --outSAMtype BAM SortedByCoordinate'))
            else:
                file_id.write('{0}\n'.format('            --outSAMtype BAM SortedByCoordinate \\'))
                parameter_list = [x.strip() for x in star_other_parameters.split(';')]
                for i in range(len(parameter_list)):
                    if parameter_list[i].find('=') > 0:
                        pattern = r'^--(.+)=(.+)$'
                        mo = re.search(pattern, parameter_list[i])
                        parameter_name = mo.group(1).strip()
                        parameter_value = mo.group(2).strip()
                        if i < len(parameter_list) - 1:
                            file_id.write('{0}\n'.format('            --{0} {1} \\'.format(parameter_name, parameter_value)))
                        else:
                            file_id.write('{0}\n'.format('            --{0} {1}'.format(parameter_name, parameter_value)))
                    else:
                        pattern = r'^--(.+)$'
                        mo = re.search(pattern, parameter_list[i])
                        parameter_name = mo.group(1).strip()
                        if i < len(parameter_list):
                            file_id.write('{0}\n'.format('            --{0} \\'.format(parameter_name)))
                        else:
                            file_id.write('{0}\n'.format('            --{0}'.format(parameter_name)))
                    i += 1
            file_id.write('{0}\n'.format('    RC=$?'))
            file_id.write('{0}\n'.format('    if [ $RC -ne 0 ]; then manage_error STAR $RC; fi'))
            file_id.write('{0}\n'.format('}'))
            file_id.write('{0}\n'.format('#-------------------------------------------------------------------------------'))
            file_id.write('{0}\n'.format('function convert_bam_to_fasta'))
            file_id.write('{0}\n'.format('{'))
            file_id.write('{0}\n'.format('    cd {0}'.format(current_run_dir)))
            file_id.write('{0}\n'.format('    echo "$SEP"'))
            file_id.write('{0}\n'.format('    echo "Converting starAligned.sortedByCoord.out.bam to FASTA format ..."'))
            file_id.write('{0}\n'.format('    /usr/bin/time \\'))
            file_id.write('{0}\n'.format('        --format="$SEP\\nElapsed real time (s): %e\\nCPU time in kernel mode (s): %S\\nCPU time in user mode (s): %U\\nPercentage of CPU: %P\\nMaximum resident set size(Kb): %M\\nAverage total memory use (Kb):%K" \\'))
            file_id.write('{0}\n'.format('        Trinity \\'))
            file_id.write('{0}\n'.format('            --CPU {0} \\'.format(threads)))
            file_id.write('{0}\n'.format('            --max_memory {0}G \\'.format(max_memory)))
            file_id.write('{0}\n'.format('            --genome_guided_bam {0}/starAligned.sortedByCoord.out.bam \\'.format(current_run_dir)))
            if trinity_other_parameters.upper() == 'NONE':
                file_id.write('{0}\n'.format('            --genome_guided_max_intron {0}'.format(genome_guided_max_intron)))
            else:
                file_id.write('{0}\n'.format('            --genome_guided_max_intron {0} \\'.format(genome_guided_max_intron)))
                parameter_list = [x.strip() for x in star_other_parameters.split(';')]
                for i in range(len(parameter_list)):
                    if parameter_list[i].find('=') > 0:
                        pattern = r'^--(.+)=(.+)$'
                        mo = re.search(pattern, parameter_list[i])
                        parameter_name = mo.group(1).strip()
                        parameter_value = mo.group(2).strip()
                        if i < len(parameter_list) - 1:
                            file_id.write('{0}\n'.format('            --{0} {1} \\'.format(parameter_name, parameter_value)))
                        else:
                            file_id.write('{0}\n'.format('            --{0} {1}'.format(parameter_name, parameter_value)))
                    else:
                        pattern = r'^--(.+)$'
                        mo = re.search(pattern, parameter_list[i])
                        parameter_name = mo.group(1).strip()
                        if i < len(parameter_list):
                            file_id.write('{0}\n'.format('            --{0} \\'.format(parameter_name)))
                        else:
                            file_id.write('{0}\n'.format('            --{0}'.format(parameter_name)))
                    i += 1
            file_id.write('{0}\n'.format('    RC=$?'))
            file_id.write('{0}\n'.format('    if [ $RC -ne 0 ]; then manage_error Trinity $RC; fi'))
            file_id.write('{0}\n'.format('}'))
            file_id.write('{0}\n'.format('#-------------------------------------------------------------------------------'))
            file_id.write('{0}\n'.format('function move_trinity_transcriptome'))
            file_id.write('{0}\n'.format('{'))
            file_id.write('{0}\n'.format('    cd {0}'.format(current_run_dir)))
            file_id.write('{0}\n'.format('    echo "$SEP"'))
            file_id.write('{0}\n'.format('    echo "Moving result files ... "'))
            file_id.write('{0}\n'.format('    mv trinity_out_dir/Trinity-GG.fasta .'))
            file_id.write('{0}\n'.format('    RC=$?'))
            file_id.write('{0}\n'.format('    if [ $RC -ne 0 ]; then manage_error mv $RC; fi'))
            file_id.write('{0}\n'.format('}'))
            file_id.write('{0}\n'.format('#-------------------------------------------------------------------------------'))
            file_id.write('{0}\n'.format('function end'))
            file_id.write('{0}\n'.format('{'))
            file_id.write('{0}\n'.format('    END_DATETIME=`date --utc +%s`'))
            file_id.write('{0}\n'.format('    FORMATTED_END_DATETIME=`date --date="@$END_DATETIME" "+%Y-%m-%d %H:%M:%S"`'))
            file_id.write('{0}\n'.format('    calculate_duration'))
            file_id.write('{0}\n'.format('    echo "$SEP"'))
            file_id.write('{0}\n'.format('    echo "Script ended OK at $FORMATTED_END_DATETIME UTC with a run duration of $DURATION s ($FORMATTED_DURATION)."'))
            file_id.write('{0}\n'.format('    echo "$SEP"'))
            file_id.write('{0}\n'.format('    RECIPIENT={0}'.format(xconfiguration.get_contact_data())))
            file_id.write('{0}\n'.format('    SUBJECT="{0}: {1} process"'.format(xlib.get_project_name(), xlib.get_star_name())))
            file_id.write('{0}\n'.format('    MESSAGE="The {0} process in node $HOSTNAME of cluster {1} ended OK at $FORMATTED_END_DATETIME with a run duration of $DURATION s ($FORMATTED_DURATION). Please review its log.<br/><br/>Regards,<br/>GI Genetica, Fisiologia e Historia Forestal<br/>Dpto. Sistemas y Recursos Naturales<br/>ETSI Montes, Forestal y del Medio Natural<br/>Universidad Politecnica de Madrid<br/>https://github.com/ggfhf/"'.format(xlib.get_star_name(), cluster_name)))
            file_id.write('{0}\n'.format('    mail --append "Content-type: text/html;"  --subject "$SUBJECT" "$RECIPIENT" <<< "$MESSAGE"'))
            file_id.write('{0}\n'.format('    exit 0'))
            file_id.write('{0}\n'.format('}'))
            file_id.write('{0}\n'.format('#-------------------------------------------------------------------------------'))
            file_id.write('{0}\n'.format('function manage_error'))
            file_id.write('{0}\n'.format('{'))
            file_id.write('{0}\n'.format('    END_DATETIME=`date --utc +%s`'))
            file_id.write('{0}\n'.format('    FORMATTED_END_DATETIME=`date --date="@$END_DATETIME" "+%Y-%m-%d %H:%M:%S"`'))
            file_id.write('{0}\n'.format('    calculate_duration'))
            file_id.write('{0}\n'.format('    echo "$SEP"'))
            file_id.write('{0}\n'.format('    echo "ERROR: $1 returned error $2"'))
            file_id.write('{0}\n'.format('    echo "Script ended WRONG at $FORMATTED_END_DATETIME UTC with a run duration of $DURATION s ($FORMATTED_DURATION)."'))
            file_id.write('{0}\n'.format('    echo "$SEP"'))
            file_id.write('{0}\n'.format('    RECIPIENT={0}'.format(xconfiguration.get_contact_data())))
            file_id.write('{0}\n'.format('    SUBJECT="{0}: {1} process"'.format(xlib.get_project_name(), xlib.get_star_name())))
            file_id.write('{0}\n'.format('    MESSAGE="The {0} process in node $HOSTNAME of cluster {1} ended WRONG at $FORMATTED_END_DATETIME with a run duration of $DURATION s ($FORMATTED_DURATION). Please review its log.<br/><br/>Regards,<br/>GI Genetica, Fisiologia e Historia Forestal<br/>Dpto. Sistemas y Recursos Naturales<br/>ETSI Montes, Forestal y del Medio Natural<br/>Universidad Politecnica de Madrid<br/>https://github.com/ggfhf/"'.format(xlib.get_star_name(), cluster_name)))
            file_id.write('{0}\n'.format('    mail --append "Content-type: text/html;"  --subject "$SUBJECT" "$RECIPIENT" <<< "$MESSAGE"'))
            file_id.write('{0}\n'.format('    exit 3'))
            file_id.write('{0}\n'.format('}'))
            file_id.write('{0}\n'.format('#-------------------------------------------------------------------------------'))
            file_id.write('{0}\n'.format('function calculate_duration'))
            file_id.write('{0}\n'.format('{'))
            file_id.write('{0}\n'.format('    DURATION=`expr $END_DATETIME - $INIT_DATETIME`'))
            file_id.write('{0}\n'.format('    HH=`expr $DURATION / 3600`'))
            file_id.write('{0}\n'.format('    MM=`expr $DURATION % 3600 / 60`'))
            file_id.write('{0}\n'.format('    SS=`expr $DURATION % 60`'))
            file_id.write('{0}\n'.format('    FORMATTED_DURATION=`printf "%03d:%02d:%02d\\n" $HH $MM $SS`'))
            file_id.write('{0}\n'.format('}'))
            file_id.write('{0}\n'.format('#-------------------------------------------------------------------------------'))
            file_id.write('{0}\n'.format('init'))
            file_id.write('{0}\n'.format('create_star_indexes'))
            file_id.write('{0}\n'.format('run_star_process'))
            file_id.write('{0}\n'.format('convert_bam_to_fasta'))
            file_id.write('{0}\n'.format('move_trinity_transcriptome'))
            file_id.write('{0}\n'.format('end'))
    except:
        error_list.append('*** ERROR: The file {0} can not be created'.format(get_star_process_script()))
        OK = False

    # return the control variable and the error list
    return (OK, error_list)

#-------------------------------------------------------------------------------

def build_star_process_starter(current_run_dir):
    '''
    Build the starter of the current STAR process.
    '''

    # initialize the control variable and the error list
    OK = True
    error_list = []

    # write the STAR process starter
    try:
        if not os.path.exists(os.path.dirname(get_star_process_starter())):
            os.makedirs(os.path.dirname(get_star_process_starter()))
        with open(get_star_process_starter(), mode='w', encoding='utf8', newline='\n') as file_id:
            file_id.write('{0}\n'.format('#!/bin/bash'))
            file_id.write('{0}\n'.format('#-------------------------------------------------------------------------------'))
            file_id.write('{0}\n'.format('{0}/{1} &>{0}/{2}'.format(current_run_dir, os.path.basename(get_star_process_script()), xlib.get_cluster_log_file())))
    except:
        error_list.append('*** ERROR: The file {0} can not be created'.format(get_star_process_starter()))
        OK = False

    # return the control variable and the error list
    return (OK, error_list)

#-------------------------------------------------------------------------------

def get_star_config_file():
    '''
    Get the STAR config file path.
    '''

    # assign the STAR config file path
    star_config_file = '{0}/{1}-config.txt'.format(xlib.get_config_dir(), xlib.get_star_code())

    # return the STAR config file path
    return star_config_file

#-------------------------------------------------------------------------------

def get_star_process_script():
    '''
    Get the STAR process script path in the local computer.
    '''

    # assign the STAR script path
    star_process_script = '{0}/{1}-process.sh'.format(xlib.get_temp_dir(), xlib.get_star_code())

    # return the STAR script path
    return star_process_script

#-------------------------------------------------------------------------------

def get_star_process_starter():
    '''
    Get the STAR process starter path in the local computer.
    '''

    # assign the STAR process starter path
    star_process_starter = '{0}/{1}-process-starter.sh'.format(xlib.get_temp_dir(), xlib.get_star_code())

    # return the STAR starter path
    return star_process_starter

#-------------------------------------------------------------------------------

if __name__ == '__main__':
     print('This file contains functions related to the STAR process used in both console mode and gui mode.')
     sys.exit(0)

#-------------------------------------------------------------------------------
